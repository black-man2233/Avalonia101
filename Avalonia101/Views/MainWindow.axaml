<Window
    Background="Transparent"
    Height="450"
    Icon="/Assets/avalonia-logo.ico"
    Title="Avalonia101"
    Width="800"
    WindowStartupLocation="CenterOwner"
    mc:Ignorable="d"
    x:Class="Avalonia101.Views.MainWindow"
    x:CompileBindings="True"
    x:DataType="vm:MainWindowViewModel"
    xmlns="https://github.com/avaloniaui"
    xmlns:conv="using:Avalonia101.Converter"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    xmlns:vm="using:Avalonia101.ViewModels"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">

    <!--  This is just used by the designer / previewer  -->
    <Design.DataContext>
        <vm:MainWindowViewModel />
    </Design.DataContext>

    <TabControl>

        <!--  Basic MVVM  -->
        <TabItem Background="Yellow" Header="Sample">

            <StackPanel DataContext="{Binding BasicMvvmVm}" Spacing="10">
                <TextBlock>Enter your Name:</TextBlock>
                <TextBox Text="{Binding Name}" />
                <TextBox
                    FontWeight="Bold"
                    IsReadOnly="True"
                    Text="{Binding Greeting, Mode=OneWay}" />
            </StackPanel>
        </TabItem>

        <!--  CommandSample  -->
        <TabItem Background="Green" Header="Commands">
            <Grid
                ColumnDefinitions="Auto, *"
                DataContext="{Binding Commands}"
                RowDefinitions="Auto, Auto, *">

                <TextBlock
                    FontWeight="Bold"
                    Grid.Column="0"
                    Grid.Row="0"
                    Margin="5"
                    Text="Me:"
                    VerticalAlignment="Center" />

                <StackPanel
                    Grid.Column="1"
                    Grid.Row="0"
                    Margin="5"
                    Spacing="5">

                    <!--  This button will ask HAL to open the doors  -->
                    <Button Command="{Binding OpenThePodBayDoorsDirectCommand}" Content="Open the pod bay doors, HAL." />

                    <!--  This button will ask HAL to open the doors for a fellow robot  -->
                    <!--  We use CommandParameter to provide the name of the robot  -->
                    <!--  Note that the button is automatically disabled if we don't enter a name  -->
                    <StackPanel Orientation="Horizontal" Spacing="5">
                        <TextBox Text="{Binding RobotName}" Watermark="Robot Name" />
                        <Button
                            Command="{Binding OpenThePodBayDoorsFellowRobotCommand}"
                            CommandParameter="{Binding RobotName}"
                            Content="{Binding RobotName, StringFormat='Open the Pod Bay for {0}'}" />
                    </StackPanel>

                    <!--  This button will ask start a multi-step sequence to open the doors  -->
                    <!--  As this is a long operation, the command is async.  -->
                    <!--  HAL inform us about the current progress of the doors.  -->
                    <!--  Note: The button will be disabled while the process is running.  -->
                    <Button Command="{Binding OpenThePodBayDoorsAsyncCommand}" Content="Start Pod Bay Opening Sequence" />

                </StackPanel>

                <Separator
                    Background="LightGray"
                    Grid.ColumnSpan="2"
                    Grid.Row="1"
                    Height="2"
                    HorizontalAlignment="Stretch"
                    Margin="5" />

                <TextBlock
                    FontWeight="Bold"
                    Grid.Column="0"
                    Grid.Row="2"
                    Margin="5"
                    Text="HAL9000:"
                    VerticalAlignment="Center" />

                <!--  This is the area where the output of HAL9000 is rendered  -->
                <Border
                    BorderBrush="{DynamicResource SystemAccentColor}"
                    BorderThickness="1"
                    CornerRadius="10"
                    Grid.Column="1"
                    Grid.Row="2"
                    Margin="5">
                    <Grid ColumnDefinitions="*,Auto">
                        <ItemsRepeater Items="{Binding ConversationLog}" Margin="5" />

                        <!--  This button will clear the recent conversation log  -->
                        <!--  We use ReflectionBinding as we bind to a method instead of a Command here,  -->
                        <!--  which is not supported via CompiledBinding.  -->
                        <Button
                            Background="Transparent"
                            Command="{ReflectionBinding ConversationLog.Clear}"
                            Content="❌"
                            Grid.Column="1"
                            VerticalAlignment="Stretch"
                            VerticalContentAlignment="Center" />
                    </Grid>
                </Border>
            </Grid>
        </TabItem>

        <!--  Data Validation  -->
        <TabItem Background="Red" Header="Data Validation">
            <TabControl TabStripPlacement="Left">
                <!--  Validation using DataAnnotations  -->
                <TabItem FontSize="20" Header="DataAnnotations">
                    <Grid Height="320">
                        <TextBox Text="{Binding ValidationUsingDataAnnotationViewModel.EMail}" VerticalAlignment="Center" />
                    </Grid>
                </TabItem>

                <!--  Validation using INotifyDataErrorInfo  -->
                <TabItem FontSize="20" Header="INotifyDataErrorInfo">
                    <Grid Height="320">
                        <TextBox Text="{Binding ValidationUsingINotifyDataErrorInfoViewModel.EMail}" VerticalAlignment="Center" />
                    </Grid>
                </TabItem>

                <!--  Validation using Exceptions in setter  -->
                <TabItem FontSize="20" Header="ExceptionInsideSetter">
                    <Grid Height="320">
                        <TextBox
                            Text="{Binding ValidationUsingExceptionInsideSetterViewModel.EMail}"
                            TextWrapping="Wrap"
                            VerticalAlignment="Center" />
                    </Grid>
                </TabItem>

            </TabControl>
        </TabItem>

        <!--  Conversion  -->
        <TabItem Background="Indigo" Header="ValueConversionSample">

            <TabItem.Resources>
                <!--  Add the MathAddConverter. Remember to add the needed namespace "conv"  -->
                <conv:MathAddConverter x:Key="MathAddConverter" />
                <!--  This Resource will be used as our ConverterParameter  -->
                <x:Double x:Key="MyConverterParameter">2</x:Double>
            </TabItem.Resources>

            <Grid
                ColumnDefinitions="Auto, *"
                RowDefinitions="Auto, Auto"
                VerticalAlignment="Center">
                <TextBlock
                    Grid.Column="0"
                    Grid.Row="0"
                    Text="Number 1" />
                <NumericUpDown
                    Grid.Column="1"
                    Grid.Row="0"
                    Value="{Binding ValueConverterVM.Number1}" />

                <TextBlock
                    Grid.Column="0"
                    Grid.Row="1"
                    Text="Sum" />
                <NumericUpDown
                    Grid.Column="1"
                    Grid.Row="1"
                    Value="{Binding ValueConverterVM.Number1, Converter={StaticResource MathAddConverter}, ConverterParameter={StaticResource MyConverterParameter}}" />
            </Grid>

        </TabItem>

    </TabControl>

</Window>